@page "/EmployeeManagement"

@using SalesManagementApp.Entities
@using SalesManagementApp.Models
@using SalesManagementApp.Services.Contracts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner

@inject IEmployeeManagementService EmployeeManagementService

<h3>Employee Management</h3>

<div style="max-width:1100px">
  <SfGrid @ref="SfEmployeeGrid"
          DataSource="employeeData"
          AllowExcelExport="true"
          AllowPdfExport="true"
          AllowSorting="true"
          AllowGrouping="true"
          AllowFiltering="true"
          AllowPaging="true"
          Toolbar="@toolbar">
    <GridEditSettings AllowAdding="true"
                      AllowEditing="true"
                      AllowDeleting="true"
                      Mode="EditMode.Batch">

      <HeaderTemplate>
        <span>@GetDialogHeaderText(context as EmployeeModel)</span>
      </HeaderTemplate>
      <FooterTemplate>
        <SfButton OnClick="@Save" IsPrimary="true">@DialogButtonCaption</SfButton>
        <SfButton OnClick="@Cancel">Cancel</SfButton>
      </FooterTemplate>
    </GridEditSettings>
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEvents OnActionBegin="ActionBeginHandler"
                OnActionComplete="ActionCompleteHandler"
                OnToolbarClick="ToolbarBtnClickHandler"
                CommandClicked="OnCommandClicked"
                OnBatchSave="OnBatchUpdateHandler"
                TValue="EmployeeModel">

    </GridEvents>
    <GridColumns>
      <GridColumn AllowAdding="false" AllowEditing="false" IsPrimaryKey="true" Field="@nameof(EmployeeModel.Id)" Width="50px"></GridColumn>

      <GridColumn AllowAdding="false" AllowEditing="false" HeaderText="Profile" Width="120px">
        <Template>
          @{
            var employee = ( context as EmployeeModel );
          }
          <div class="profile-image-container">
            <img src="@(employee?.ImagePath)" alt="" />
          </div>
        </Template>
      </GridColumn>

      <GridColumn HeaderText="First Name" Field="@nameof(EmployeeModel.FirstName)" Width="120px"></GridColumn>

      <GridColumn HeaderText="Last Name" Field="@nameof(EmployeeModel.LastName)" Width="120px"></GridColumn>

      <GridForeignColumn HeaderText="Designation" TValue="EmployeeJobTitle"
                         Field="@nameof(EmployeeModel.EmployeeJobTitleId)"
                         ForeignDataSource="employeeJobTitleData"
                         ForeignKeyValue="Name" Width="100px">
        <EditTemplate>
          <SfDropDownList @bind-Value="@((context as EmployeeModel).EmployeeJobTitleId)"
                          ID="EmployeeJobTitleId"
                          DataSource="employeeJobTitleData"
                          TItem="EmployeeJobTitle"
                          TValue="int">
            <DropDownListFieldSettings Text="Name" Value="EmployeeJobTitleId"></DropDownListFieldSettings>
          </SfDropDownList>
        </EditTemplate>
      </GridForeignColumn>

      <GridColumn Field="@nameof(EmployeeModel.Gender)" Width="100px">
        <EditTemplate>
          <SfDropDownList @bind-Value="@((context as EmployeeModel).Gender)"
                          DataSource="genderCollection"
                          TItem="string"
                          TValue="string">
          </SfDropDownList>
        </EditTemplate>
      </GridColumn>

      <GridColumn Field="@nameof(EmployeeModel.Email)" Width="120px"></GridColumn>

      <GridColumn HeaderText="Date of Birth" Field="@nameof(EmployeeModel.DateOfBirth)" Format="d"></GridColumn>

      <GridForeignColumn HeaderText="Reports To" TValue="ReportToModel"
                         Field="@nameof(EmployeeModel.ReportToEmpId)"
                         ForeignDataSource="reportToEmployeeData"
                         ForeignKeyValue="ReportToName" Width="130px">
        <EditTemplate>
          <SfDropDownList @bind-value="@((context as EmployeeModel).ReportToEmpId)"
                          ID="ReportToEmpId"
                          DataSource="reportToEmployeeData" TItem="ReportToModel"
                          TValue="Nullable<int>">
            <DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId">
            </DropDownListFieldSettings>

          </SfDropDownList>
        </EditTemplate>
      </GridForeignColumn>
      <GridColumn Width="110px" HeaderText="">
        <GridCommandColumns>
          <GridCommandColumn Type="CommandButtonType.Edit"
                             ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-edit",
                                                CssClass ="e-flat"
                                            })">
          </GridCommandColumn>
          <GridCommandColumn Type="CommandButtonType.Delete"
                             ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-delete",
                                                CssClass ="e-flat"
                                            })">
          </GridCommandColumn>
          <GridCommandColumn Type="CommandButtonType.Save"
                             ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-update",
                                                CssClass ="e-flat"
                                            })">
          </GridCommandColumn>
          <GridCommandColumn Type="CommandButtonType.Cancel"
                             ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-cancel-icon",
                                                CssClass ="e-flat"
                                            })">
          </GridCommandColumn>
          @*<GridColumn HeaderText = "Custom Operations" Width ="110">
          <GridCommandColumns>
          <GridCommandColumn
          ButtonOption="@(new CommandButtonOptions(){
          Content = "O1",
          CssClass = "e-outline"
          })">
          </GridCommandColumn>
          <GridCommandColumn
          ButtonOption="@(new CommandButtonOptions(){
          Content = "O2",
          CssClass = "e-outline"
          })">
          </GridCommandColumn>
          </GridCommandColumns>
          </GridColumn>*@
        </GridCommandColumns>
      </GridColumn>
    </GridColumns>
    <SfSpinner @bind-Visible="@SpinnerVisible"></SfSpinner>
  </SfGrid>
</div>
<style>
  .profile-image-container {
      width: 60px;
      height: 60px;
  }

      .profile-image-container img {
          width: 100%;
          height: 100%;
          border-radius: 50%;
      }
</style>

@code {
  private enum GenderVal
  {
    Male,
    Female,
    Other
  }
  private string DialogButtonCaption { get; set; }

  private SfGrid<EmployeeModel>? SfEmployeeGrid { get; set; }

  public bool SpinnerVisible { get; set; } = false;

  private string[] genderCollection = Enum.GetNames ( typeof ( GenderVal ) );

  private List<EmployeeModel>? employeeData = null;
  private List<EmployeeJobTitle>? employeeJobTitleData;
  private List<ReportToModel>? reportToEmployeeData;
  //private List<object> toolbar = new List<object> { "Add", "Update", "Delete", "Cancel", "Search","ExcelExport","PdfExport",
  //  new ItemModel(){Text = "XML Export", TooltipText ="Export Data to XML",
  //                                      PrefixIcon = "e-click", Id = "XmlExport"} };
  private List<object> toolbar = new List<object> { "Add", "Update", "Cancel", "Search","ExcelExport","PdfExport",
    new ItemModel(){Text = "XML Export", TooltipText ="Export Data to XML",
                                        PrefixIcon = "e-click", Id = "XmlExport"} };
  protected override async Task OnInitializedAsync ()
  {
    SpinnerVisible = true;

    employeeData = await EmployeeManagementService.GetEmployees ();
    employeeJobTitleData = await EmployeeManagementService.GetJobTitles ();
    reportToEmployeeData = await EmployeeManagementService.GetReportToEmployees ();

    SpinnerVisible = false;
  }

  public async Task ActionBeginHandler ( ActionEventArgs<EmployeeModel> args )
  {

    if ( args.RequestType.Equals ( Syncfusion.Blazor.Grids.Action.Save ) )
    {
      if ( args.Action == "Add" )
      {
        await EmployeeManagementService.AddEmployee ( args.Data );
      }
      else if ( args.Action == "Edit" )
      {
        await EmployeeManagementService.UpdateEmployee ( args.Data );
      }
    }
    else if ( args.RequestType.Equals ( Syncfusion.Blazor.Grids.Action.Delete ) )
    {
      await EmployeeManagementService.DeleteEmployee ( args.Data.Id );
    }
  }

  public async Task ActionCompleteHandler ( ActionEventArgs<EmployeeModel> args )
  {
    if ( args.RequestType.Equals ( Syncfusion.Blazor.Grids.Action.Save ) )
    {
      if ( args.Action == "Add" )
      {
        employeeData = await EmployeeManagementService.GetEmployees ();
        SfEmployeeGrid?.Refresh ();
      }
    }
  }

  public async Task ToolbarBtnClickHandler ( Syncfusion.Blazor.Navigations.ClickEventArgs args )
  {
    if ( SfEmployeeGrid != null )
    {
      if ( args.Item.Id.Contains ( "_excelexport" ) )
      {
        await SfEmployeeGrid.ExportToExcelAsync ();
      }
      else if ( args.Item.Id.Contains ( "_pdfexport" ) )
      {
        await SfEmployeeGrid.ExportToPdfAsync ();
      }
      else if ( args.Item.Id == "XmlExport" )
      {
        Console.Write ( "Export to Xml functionality" );
      }
    }
  }

  public async void OnCommandClicked ( CommandClickEventArgs<EmployeeModel> args )
  {
    if ( args.CommandColumn.ButtonOption.Content == "O1" )
    {
      Console.Write ( "Custom Operation 1" );
    }
    else if ( args.CommandColumn.ButtonOption.Content == "O2" )
    {
      Console.Write ( "Custom Operation 2" );
    }

    await Task.CompletedTask;
  }

  private string GetDialogHeaderText ( EmployeeModel employeeModel )
  {
    if ( employeeModel.Id == 0 )
    {
      DialogButtonCaption = "Add";
      return "Add Employee";
    }
    else
    {
      DialogButtonCaption = "Update";
      return $"Edit Details: {employeeModel.FirstName} {employeeModel.LastName}";
    }
  }

  private async Task Cancel ()
  {
    if ( SfEmployeeGrid != null )
      await SfEmployeeGrid.CloseEditAsync ();
  }
  private async Task Save ()
  {
    if ( SfEmployeeGrid != null )
      await SfEmployeeGrid.EndEditAsync ();
  }

  public async Task OnBatchUpdateHandler ( BeforeBatchSaveArgs<EmployeeModel> args )
  {
    var addedRecords = args.BatchChanges.AddedRecords;
    var updatedRecords = args.BatchChanges.ChangedRecords;
    var deletedRecords = args.BatchChanges.DeletedRecords;

    foreach ( EmployeeModel employee in addedRecords )
    {
      await EmployeeManagementService.AddEmployee ( employee );
    }
    foreach ( EmployeeModel employee in updatedRecords )
    {
      await EmployeeManagementService.UpdateEmployee ( employee );
    }
    foreach ( EmployeeModel employee in deletedRecords )
    {
      await EmployeeManagementService.DeleteEmployee ( employee.Id );
    }

  }

}
